using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;

/*=================================================================================================
DESCRIPTION
*================================================================================================*/
/* 
 ------------------------------------------------------------------------------------------------*/

namespace PasswordVault
{
    /*=================================================================================================
	ENUMERATIONS
	*================================================================================================*/

    /*=================================================================================================
	STRUCTS
	*================================================================================================*/

    /*=================================================================================================
	CLASSES
	*================================================================================================*/
    public class BindableList<T>
    {
        /*=================================================================================================
		CONSTANTS
		*================================================================================================*/
        /*PUBLIC******************************************************************************************/

        /*PRIVATE*****************************************************************************************/

        /*=================================================================================================
		FIELDS
		*================================================================================================*/
        /*PUBLIC******************************************************************************************/

        /*PRIVATE*****************************************************************************************/
        private BindingList<T> _list;

        /*=================================================================================================
		PROPERTIES
		*================================================================================================*/
        /*PUBLIC******************************************************************************************/
        public int Count
        {
            get
            {
                return _list.Count;
            }
        }

        /*PRIVATE*****************************************************************************************/

        /*=================================================================================================
		CONSTRUCTORS
		*================================================================================================*/
        public BindableList()
        {
            Type d1 = typeof(BindingList<>);
            Type[] typeArgs = { typeof(T) };
            Type makeme = d1.MakeGenericType(typeArgs);
            object o = Activator.CreateInstance(makeme);

            _list = o as BindingList<T>;
        }

        /*=================================================================================================
		PUBLIC METHODS
		*================================================================================================*/
        /*************************************************************************************************/
        public void CreateBinding(DataGridView dgv)
        {
            BindingSource bindingSource;
            bindingSource = new BindingSource(this.Get(), null);

            dgv.DataSource = bindingSource;
            dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dgv.RowHeadersVisible = false;
        }

        /*************************************************************************************************/
        public BindingSource GetBindingSource()
        {
            BindingSource bindingSource;
            bindingSource = new BindingSource(this.Get(), null);

            return bindingSource;
        }

        /*************************************************************************************************/
        public void Add(T item)
        {
            _list.Add(item);
        }

        /*************************************************************************************************/
        public void Remove(int index)
        {
            Exception ex;

            if (index < _list.Count && _list.Count != 0)
            {
                _list.RemoveAt(index);
            }
            else
            {
                ex = new ArgumentException("Index exceeds database index.");
                throw ex;
            }
        }

        /*************************************************************************************************/
        public void Swap(int first, int second)
        {
            Exception ex;

            if (first >= _list.Count || second >= _list.Count)
            {
                ex = new ArgumentException("Index exceeds database index.");
                throw ex;
            }
            else if (first == second)
            {
                ex = new ArgumentException("Indexes cannot be the same.");
                throw ex;
            }
            else
            {
                SwapElements<T>(_list, first, second);
            }
        }

        /*************************************************************************************************/
        public BindingList<T> Get()
        {
            return _list;
        }

        /*************************************************************************************************/
        public void Set(BindingList<T> setList)
        {
            _list = setList;
        }

        /*************************************************************************************************/
        public void Clear()
        {
            _list.Clear();
        }

        /*************************************************************************************************/
        public List<T> GetList()
        {
            return _list.ToList<T>();
        }

        /*=================================================================================================
		PRIVATE METHODS
		*================================================================================================*/
        /*************************************************************************************************/

        /*=================================================================================================
		STATIC METHODS
		*================================================================================================*/
        /*************************************************************************************************/
        private static void SwapElements<K>(BindingList<T> list, int first, int second)
        {
            T temp = list[first];
            list[first] = list[second];
            list[second] = temp;
        }

    } // BindableList CLASS
} // HerdHelper NAMESPACE
